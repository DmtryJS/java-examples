plugins {
  id "java"
  id "com.github.johnrengelman.shadow" version "5.2.0"
}

// must compile dll/so before generate the jar
tasks."compileJava".dependsOn project(":jvmti-native").tasks."assemble"

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
}

repositories {
  mavenLocal()
  jcenter()
}

dependencies {
  compileOnly 'org.projectlombok:lombok:1.18.12'
  annotationProcessor 'org.projectlombok:lombok:1.18.12'

  implementation("net.bytebuddy:byte-buddy-agent:1.10.11")
  implementation("net.metzweb:tinyserver:1.0.0")
  implementation("org.apache.commons:commons-lang3:3.10")
  implementation("commons-io:commons-io:2.7")
//  implementation("org.slf4j:slf4j-simple:1.7.30")
  implementation("ch.qos.logback:logback-classic:1.2.3")

  testCompileOnly 'org.projectlombok:lombok:1.18.12'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
  testImplementation "org.junit.jupiter:junit-jupiter:5.6.2"
  testImplementation "org.mockito:mockito-junit-jupiter:3.3.3"
}

test {
  useJUnitPlatform()
  testLogging {
    events "passed", "skipped", "failed"
  }
}

def mainClassName = "com.mageddo.jvmti.poc.CurrentProcessJvmAttach"

task run(type: JavaExec) {
  main = mainClassName
  classpath sourceSets.main.runtimeClasspath
  classpath configurations.runtime
  jvmArgs = ["-agentpath:${project(":jvmti-native").buildDir}/libs/jvmtiInstanceCounter/shared/libjvmtiInstanceCounter.so"]
}


jar {
  manifest {
    attributes(
      "Main-Class": mainClassName,
      "Premain-Class": "com.mageddo.jvmti.agents.ClassAgent",
      "Agent-Class": "com.mageddo.jvmti.agents.ClassAgent"
    )
  }
}

shadowJar {
  mergeServiceFiles()
  append 'META-INF/resources'
  transform(com.github.jengelman.gradle.plugins.shadow.transformers.PropertiesFileTransformer) {
    paths = []
    mergeStrategy = "append"
  }
//  from("${project(":jvmti-native").buildDir}/libs/jvmtiInstanceCounter/shared") {
//    into "resources/"
//  }
}
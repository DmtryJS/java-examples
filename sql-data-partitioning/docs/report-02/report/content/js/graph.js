/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 2009.0, "series": [{"data": [[0.0, 0.0], [0.1, 3.0], [0.2, 3.0], [0.3, 3.0], [0.4, 4.0], [0.5, 4.0], [0.6, 4.0], [0.7, 4.0], [0.8, 4.0], [0.9, 4.0], [1.0, 4.0], [1.1, 4.0], [1.2, 4.0], [1.3, 5.0], [1.4, 5.0], [1.5, 5.0], [1.6, 5.0], [1.7, 5.0], [1.8, 5.0], [1.9, 5.0], [2.0, 5.0], [2.1, 5.0], [2.2, 5.0], [2.3, 5.0], [2.4, 5.0], [2.5, 5.0], [2.6, 5.0], [2.7, 5.0], [2.8, 5.0], [2.9, 5.0], [3.0, 5.0], [3.1, 6.0], [3.2, 6.0], [3.3, 6.0], [3.4, 6.0], [3.5, 6.0], [3.6, 6.0], [3.7, 6.0], [3.8, 6.0], [3.9, 6.0], [4.0, 6.0], [4.1, 6.0], [4.2, 6.0], [4.3, 6.0], [4.4, 6.0], [4.5, 6.0], [4.6, 6.0], [4.7, 6.0], [4.8, 6.0], [4.9, 6.0], [5.0, 6.0], [5.1, 6.0], [5.2, 6.0], [5.3, 6.0], [5.4, 6.0], [5.5, 6.0], [5.6, 6.0], [5.7, 6.0], [5.8, 6.0], [5.9, 6.0], [6.0, 7.0], [6.1, 7.0], [6.2, 7.0], [6.3, 7.0], [6.4, 7.0], [6.5, 7.0], [6.6, 7.0], [6.7, 7.0], [6.8, 7.0], [6.9, 7.0], [7.0, 7.0], [7.1, 7.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 7.0], [7.8, 7.0], [7.9, 7.0], [8.0, 7.0], [8.1, 7.0], [8.2, 7.0], [8.3, 7.0], [8.4, 7.0], [8.5, 7.0], [8.6, 7.0], [8.7, 7.0], [8.8, 7.0], [8.9, 7.0], [9.0, 7.0], [9.1, 7.0], [9.2, 7.0], [9.3, 7.0], [9.4, 7.0], [9.5, 7.0], [9.6, 7.0], [9.7, 7.0], [9.8, 8.0], [9.9, 8.0], [10.0, 8.0], [10.1, 8.0], [10.2, 8.0], [10.3, 8.0], [10.4, 8.0], [10.5, 8.0], [10.6, 8.0], [10.7, 8.0], [10.8, 8.0], [10.9, 8.0], [11.0, 8.0], [11.1, 8.0], [11.2, 8.0], [11.3, 8.0], [11.4, 8.0], [11.5, 8.0], [11.6, 8.0], [11.7, 8.0], [11.8, 8.0], [11.9, 8.0], [12.0, 8.0], [12.1, 8.0], [12.2, 8.0], [12.3, 8.0], [12.4, 8.0], [12.5, 8.0], [12.6, 8.0], [12.7, 8.0], [12.8, 8.0], [12.9, 8.0], [13.0, 8.0], [13.1, 8.0], [13.2, 8.0], [13.3, 8.0], [13.4, 8.0], [13.5, 8.0], [13.6, 8.0], [13.7, 8.0], [13.8, 8.0], [13.9, 8.0], [14.0, 8.0], [14.1, 8.0], [14.2, 8.0], [14.3, 8.0], [14.4, 9.0], [14.5, 9.0], [14.6, 9.0], [14.7, 9.0], [14.8, 9.0], [14.9, 9.0], [15.0, 9.0], [15.1, 9.0], [15.2, 9.0], [15.3, 9.0], [15.4, 9.0], [15.5, 9.0], [15.6, 9.0], [15.7, 9.0], [15.8, 9.0], [15.9, 9.0], [16.0, 9.0], [16.1, 9.0], [16.2, 9.0], [16.3, 9.0], [16.4, 9.0], [16.5, 9.0], [16.6, 9.0], [16.7, 9.0], [16.8, 9.0], [16.9, 9.0], [17.0, 9.0], [17.1, 9.0], [17.2, 9.0], [17.3, 9.0], [17.4, 9.0], [17.5, 9.0], [17.6, 9.0], [17.7, 9.0], [17.8, 9.0], [17.9, 9.0], [18.0, 9.0], [18.1, 9.0], [18.2, 9.0], [18.3, 9.0], [18.4, 9.0], [18.5, 9.0], [18.6, 9.0], [18.7, 9.0], [18.8, 9.0], [18.9, 9.0], [19.0, 9.0], [19.1, 9.0], [19.2, 9.0], [19.3, 9.0], [19.4, 9.0], [19.5, 10.0], [19.6, 10.0], [19.7, 10.0], [19.8, 10.0], [19.9, 10.0], [20.0, 10.0], [20.1, 10.0], [20.2, 10.0], [20.3, 10.0], [20.4, 10.0], [20.5, 10.0], [20.6, 10.0], [20.7, 10.0], [20.8, 10.0], [20.9, 10.0], [21.0, 10.0], [21.1, 10.0], [21.2, 10.0], [21.3, 10.0], [21.4, 10.0], [21.5, 10.0], [21.6, 10.0], [21.7, 10.0], [21.8, 10.0], [21.9, 10.0], [22.0, 10.0], [22.1, 10.0], [22.2, 10.0], [22.3, 10.0], [22.4, 10.0], [22.5, 10.0], [22.6, 10.0], [22.7, 10.0], [22.8, 10.0], [22.9, 10.0], [23.0, 10.0], [23.1, 10.0], [23.2, 10.0], [23.3, 10.0], [23.4, 10.0], [23.5, 10.0], [23.6, 10.0], [23.7, 10.0], [23.8, 10.0], [23.9, 10.0], [24.0, 10.0], [24.1, 10.0], [24.2, 10.0], [24.3, 10.0], [24.4, 10.0], [24.5, 10.0], [24.6, 10.0], [24.7, 10.0], [24.8, 10.0], [24.9, 11.0], [25.0, 11.0], [25.1, 11.0], [25.2, 11.0], [25.3, 11.0], [25.4, 11.0], [25.5, 11.0], [25.6, 11.0], [25.7, 11.0], [25.8, 11.0], [25.9, 11.0], [26.0, 11.0], [26.1, 11.0], [26.2, 11.0], [26.3, 11.0], [26.4, 11.0], [26.5, 11.0], [26.6, 11.0], [26.7, 11.0], [26.8, 11.0], [26.9, 11.0], [27.0, 11.0], [27.1, 11.0], [27.2, 11.0], [27.3, 11.0], [27.4, 11.0], [27.5, 11.0], [27.6, 11.0], [27.7, 11.0], [27.8, 11.0], [27.9, 11.0], [28.0, 11.0], [28.1, 11.0], [28.2, 11.0], [28.3, 11.0], [28.4, 11.0], [28.5, 11.0], [28.6, 11.0], [28.7, 11.0], [28.8, 11.0], [28.9, 11.0], [29.0, 11.0], [29.1, 11.0], [29.2, 11.0], [29.3, 11.0], [29.4, 11.0], [29.5, 11.0], [29.6, 11.0], [29.7, 11.0], [29.8, 11.0], [29.9, 11.0], [30.0, 11.0], [30.1, 11.0], [30.2, 11.0], [30.3, 12.0], [30.4, 12.0], [30.5, 12.0], [30.6, 12.0], [30.7, 12.0], [30.8, 12.0], [30.9, 12.0], [31.0, 12.0], [31.1, 12.0], [31.2, 12.0], [31.3, 12.0], [31.4, 12.0], [31.5, 12.0], [31.6, 12.0], [31.7, 12.0], [31.8, 12.0], [31.9, 12.0], [32.0, 12.0], [32.1, 12.0], [32.2, 12.0], [32.3, 12.0], [32.4, 12.0], [32.5, 12.0], [32.6, 12.0], [32.7, 12.0], [32.8, 12.0], [32.9, 12.0], [33.0, 12.0], [33.1, 12.0], [33.2, 12.0], [33.3, 12.0], [33.4, 12.0], [33.5, 12.0], [33.6, 12.0], [33.7, 12.0], [33.8, 12.0], [33.9, 12.0], [34.0, 12.0], [34.1, 12.0], [34.2, 12.0], [34.3, 12.0], [34.4, 12.0], [34.5, 12.0], [34.6, 12.0], [34.7, 12.0], [34.8, 12.0], [34.9, 12.0], [35.0, 12.0], [35.1, 12.0], [35.2, 12.0], [35.3, 12.0], [35.4, 12.0], [35.5, 12.0], [35.6, 12.0], [35.7, 13.0], [35.8, 13.0], [35.9, 13.0], [36.0, 13.0], [36.1, 13.0], [36.2, 13.0], [36.3, 13.0], [36.4, 13.0], [36.5, 13.0], [36.6, 13.0], [36.7, 13.0], [36.8, 13.0], [36.9, 13.0], [37.0, 13.0], [37.1, 13.0], [37.2, 13.0], [37.3, 13.0], [37.4, 13.0], [37.5, 13.0], [37.6, 13.0], [37.7, 13.0], [37.8, 13.0], [37.9, 13.0], [38.0, 13.0], [38.1, 13.0], [38.2, 13.0], [38.3, 13.0], [38.4, 13.0], [38.5, 13.0], [38.6, 13.0], [38.7, 13.0], [38.8, 13.0], [38.9, 13.0], [39.0, 13.0], [39.1, 13.0], [39.2, 13.0], [39.3, 13.0], [39.4, 13.0], [39.5, 13.0], [39.6, 13.0], [39.7, 13.0], [39.8, 13.0], [39.9, 13.0], [40.0, 13.0], [40.1, 13.0], [40.2, 13.0], [40.3, 13.0], [40.4, 13.0], [40.5, 13.0], [40.6, 13.0], [40.7, 13.0], [40.8, 14.0], [40.9, 14.0], [41.0, 14.0], [41.1, 14.0], [41.2, 14.0], [41.3, 14.0], [41.4, 14.0], [41.5, 14.0], [41.6, 14.0], [41.7, 14.0], [41.8, 14.0], [41.9, 14.0], [42.0, 14.0], [42.1, 14.0], [42.2, 14.0], [42.3, 14.0], [42.4, 14.0], [42.5, 14.0], [42.6, 14.0], [42.7, 14.0], [42.8, 14.0], [42.9, 14.0], [43.0, 14.0], [43.1, 14.0], [43.2, 14.0], [43.3, 14.0], [43.4, 14.0], [43.5, 14.0], [43.6, 14.0], [43.7, 14.0], [43.8, 14.0], [43.9, 14.0], [44.0, 14.0], [44.1, 14.0], [44.2, 14.0], [44.3, 14.0], [44.4, 14.0], [44.5, 14.0], [44.6, 14.0], [44.7, 14.0], [44.8, 14.0], [44.9, 14.0], [45.0, 14.0], [45.1, 14.0], [45.2, 14.0], [45.3, 14.0], [45.4, 14.0], [45.5, 14.0], [45.6, 14.0], [45.7, 15.0], [45.8, 15.0], [45.9, 15.0], [46.0, 15.0], [46.1, 15.0], [46.2, 15.0], [46.3, 15.0], [46.4, 15.0], [46.5, 15.0], [46.6, 15.0], [46.7, 15.0], [46.8, 15.0], [46.9, 15.0], [47.0, 15.0], [47.1, 15.0], [47.2, 15.0], [47.3, 15.0], [47.4, 15.0], [47.5, 15.0], [47.6, 15.0], [47.7, 15.0], [47.8, 15.0], [47.9, 15.0], [48.0, 15.0], [48.1, 15.0], [48.2, 15.0], [48.3, 15.0], [48.4, 15.0], [48.5, 15.0], [48.6, 15.0], [48.7, 15.0], [48.8, 15.0], [48.9, 15.0], [49.0, 15.0], [49.1, 15.0], [49.2, 15.0], [49.3, 15.0], [49.4, 15.0], [49.5, 15.0], [49.6, 15.0], [49.7, 15.0], [49.8, 15.0], [49.9, 15.0], [50.0, 15.0], [50.1, 15.0], [50.2, 16.0], [50.3, 16.0], [50.4, 16.0], [50.5, 16.0], [50.6, 16.0], [50.7, 16.0], [50.8, 16.0], [50.9, 16.0], [51.0, 16.0], [51.1, 16.0], [51.2, 16.0], [51.3, 16.0], [51.4, 16.0], [51.5, 16.0], [51.6, 16.0], [51.7, 16.0], [51.8, 16.0], [51.9, 16.0], [52.0, 16.0], [52.1, 16.0], [52.2, 16.0], [52.3, 16.0], [52.4, 16.0], [52.5, 16.0], [52.6, 16.0], [52.7, 16.0], [52.8, 16.0], [52.9, 16.0], [53.0, 16.0], [53.1, 16.0], [53.2, 16.0], [53.3, 16.0], [53.4, 16.0], [53.5, 16.0], [53.6, 16.0], [53.7, 16.0], [53.8, 16.0], [53.9, 16.0], [54.0, 16.0], [54.1, 16.0], [54.2, 16.0], [54.3, 17.0], [54.4, 17.0], [54.5, 17.0], [54.6, 17.0], [54.7, 17.0], [54.8, 17.0], [54.9, 17.0], [55.0, 17.0], [55.1, 17.0], [55.2, 17.0], [55.3, 17.0], [55.4, 17.0], [55.5, 17.0], [55.6, 17.0], [55.7, 17.0], [55.8, 17.0], [55.9, 17.0], [56.0, 17.0], [56.1, 17.0], [56.2, 17.0], [56.3, 17.0], [56.4, 17.0], [56.5, 17.0], [56.6, 17.0], [56.7, 17.0], [56.8, 17.0], [56.9, 17.0], [57.0, 17.0], [57.1, 17.0], [57.2, 17.0], [57.3, 17.0], [57.4, 17.0], [57.5, 17.0], [57.6, 17.0], [57.7, 17.0], [57.8, 17.0], [57.9, 17.0], [58.0, 17.0], [58.1, 18.0], [58.2, 18.0], [58.3, 18.0], [58.4, 18.0], [58.5, 18.0], [58.6, 18.0], [58.7, 18.0], [58.8, 18.0], [58.9, 18.0], [59.0, 18.0], [59.1, 18.0], [59.2, 18.0], [59.3, 18.0], [59.4, 18.0], [59.5, 18.0], [59.6, 18.0], [59.7, 18.0], [59.8, 18.0], [59.9, 18.0], [60.0, 18.0], [60.1, 18.0], [60.2, 18.0], [60.3, 18.0], [60.4, 18.0], [60.5, 18.0], [60.6, 18.0], [60.7, 18.0], [60.8, 18.0], [60.9, 18.0], [61.0, 18.0], [61.1, 18.0], [61.2, 18.0], [61.3, 18.0], [61.4, 18.0], [61.5, 19.0], [61.6, 19.0], [61.7, 19.0], [61.8, 19.0], [61.9, 19.0], [62.0, 19.0], [62.1, 19.0], [62.2, 19.0], [62.3, 19.0], [62.4, 19.0], [62.5, 19.0], [62.6, 19.0], [62.7, 19.0], [62.8, 19.0], [62.9, 19.0], [63.0, 19.0], [63.1, 19.0], [63.2, 19.0], [63.3, 19.0], [63.4, 19.0], [63.5, 19.0], [63.6, 19.0], [63.7, 19.0], [63.8, 19.0], [63.9, 19.0], [64.0, 19.0], [64.1, 19.0], [64.2, 19.0], [64.3, 19.0], [64.4, 19.0], [64.5, 20.0], [64.6, 20.0], [64.7, 20.0], [64.8, 20.0], [64.9, 20.0], [65.0, 20.0], [65.1, 20.0], [65.2, 20.0], [65.3, 20.0], [65.4, 20.0], [65.5, 20.0], [65.6, 20.0], [65.7, 20.0], [65.8, 20.0], [65.9, 20.0], [66.0, 20.0], [66.1, 20.0], [66.2, 20.0], [66.3, 20.0], [66.4, 20.0], [66.5, 20.0], [66.6, 20.0], [66.7, 20.0], [66.8, 20.0], [66.9, 20.0], [67.0, 20.0], [67.1, 20.0], [67.2, 21.0], [67.3, 21.0], [67.4, 21.0], [67.5, 21.0], [67.6, 21.0], [67.7, 21.0], [67.8, 21.0], [67.9, 21.0], [68.0, 21.0], [68.1, 21.0], [68.2, 21.0], [68.3, 21.0], [68.4, 21.0], [68.5, 21.0], [68.6, 21.0], [68.7, 21.0], [68.8, 21.0], [68.9, 21.0], [69.0, 21.0], [69.1, 21.0], [69.2, 21.0], [69.3, 21.0], [69.4, 21.0], [69.5, 21.0], [69.6, 21.0], [69.7, 22.0], [69.8, 22.0], [69.9, 22.0], [70.0, 22.0], [70.1, 22.0], [70.2, 22.0], [70.3, 22.0], [70.4, 22.0], [70.5, 22.0], [70.6, 22.0], [70.7, 22.0], [70.8, 22.0], [70.9, 22.0], [71.0, 22.0], [71.1, 22.0], [71.2, 22.0], [71.3, 22.0], [71.4, 22.0], [71.5, 22.0], [71.6, 22.0], [71.7, 22.0], [71.8, 22.0], [71.9, 23.0], [72.0, 23.0], [72.1, 23.0], [72.2, 23.0], [72.3, 23.0], [72.4, 23.0], [72.5, 23.0], [72.6, 23.0], [72.7, 23.0], [72.8, 23.0], [72.9, 23.0], [73.0, 23.0], [73.1, 23.0], [73.2, 23.0], [73.3, 23.0], [73.4, 23.0], [73.5, 23.0], [73.6, 23.0], [73.7, 23.0], [73.8, 23.0], [73.9, 24.0], [74.0, 24.0], [74.1, 24.0], [74.2, 24.0], [74.3, 24.0], [74.4, 24.0], [74.5, 24.0], [74.6, 24.0], [74.7, 24.0], [74.8, 24.0], [74.9, 24.0], [75.0, 24.0], [75.1, 24.0], [75.2, 24.0], [75.3, 24.0], [75.4, 24.0], [75.5, 24.0], [75.6, 24.0], [75.7, 24.0], [75.8, 25.0], [75.9, 25.0], [76.0, 25.0], [76.1, 25.0], [76.2, 25.0], [76.3, 25.0], [76.4, 25.0], [76.5, 25.0], [76.6, 25.0], [76.7, 25.0], [76.8, 25.0], [76.9, 25.0], [77.0, 25.0], [77.1, 25.0], [77.2, 25.0], [77.3, 25.0], [77.4, 26.0], [77.5, 26.0], [77.6, 26.0], [77.7, 26.0], [77.8, 26.0], [77.9, 26.0], [78.0, 26.0], [78.1, 26.0], [78.2, 26.0], [78.3, 26.0], [78.4, 26.0], [78.5, 26.0], [78.6, 26.0], [78.7, 26.0], [78.8, 26.0], [78.9, 26.0], [79.0, 27.0], [79.1, 27.0], [79.2, 27.0], [79.3, 27.0], [79.4, 27.0], [79.5, 27.0], [79.6, 27.0], [79.7, 27.0], [79.8, 27.0], [79.9, 27.0], [80.0, 27.0], [80.1, 27.0], [80.2, 27.0], [80.3, 27.0], [80.4, 28.0], [80.5, 28.0], [80.6, 28.0], [80.7, 28.0], [80.8, 28.0], [80.9, 28.0], [81.0, 28.0], [81.1, 28.0], [81.2, 28.0], [81.3, 28.0], [81.4, 28.0], [81.5, 28.0], [81.6, 28.0], [81.7, 28.0], [81.8, 29.0], [81.9, 29.0], [82.0, 29.0], [82.1, 29.0], [82.2, 29.0], [82.3, 29.0], [82.4, 29.0], [82.5, 29.0], [82.6, 29.0], [82.7, 29.0], [82.8, 29.0], [82.9, 29.0], [83.0, 30.0], [83.1, 30.0], [83.2, 30.0], [83.3, 30.0], [83.4, 30.0], [83.5, 30.0], [83.6, 30.0], [83.7, 30.0], [83.8, 30.0], [83.9, 30.0], [84.0, 30.0], [84.1, 31.0], [84.2, 31.0], [84.3, 31.0], [84.4, 31.0], [84.5, 31.0], [84.6, 31.0], [84.7, 31.0], [84.8, 31.0], [84.9, 31.0], [85.0, 31.0], [85.1, 31.0], [85.2, 32.0], [85.3, 32.0], [85.4, 32.0], [85.5, 32.0], [85.6, 32.0], [85.7, 32.0], [85.8, 32.0], [85.9, 32.0], [86.0, 32.0], [86.1, 32.0], [86.2, 33.0], [86.3, 33.0], [86.4, 33.0], [86.5, 33.0], [86.6, 33.0], [86.7, 33.0], [86.8, 33.0], [86.9, 33.0], [87.0, 33.0], [87.1, 34.0], [87.2, 34.0], [87.3, 34.0], [87.4, 34.0], [87.5, 34.0], [87.6, 34.0], [87.7, 34.0], [87.8, 34.0], [87.9, 34.0], [88.0, 35.0], [88.1, 35.0], [88.2, 35.0], [88.3, 35.0], [88.4, 35.0], [88.5, 35.0], [88.6, 35.0], [88.7, 36.0], [88.8, 36.0], [88.9, 36.0], [89.0, 36.0], [89.1, 36.0], [89.2, 36.0], [89.3, 36.0], [89.4, 36.0], [89.5, 37.0], [89.6, 37.0], [89.7, 37.0], [89.8, 37.0], [89.9, 37.0], [90.0, 37.0], [90.1, 38.0], [90.2, 38.0], [90.3, 38.0], [90.4, 38.0], [90.5, 38.0], [90.6, 38.0], [90.7, 39.0], [90.8, 39.0], [90.9, 39.0], [91.0, 39.0], [91.1, 39.0], [91.2, 39.0], [91.3, 40.0], [91.4, 40.0], [91.5, 40.0], [91.6, 40.0], [91.7, 40.0], [91.8, 41.0], [91.9, 41.0], [92.0, 41.0], [92.1, 41.0], [92.2, 41.0], [92.3, 42.0], [92.4, 42.0], [92.5, 42.0], [92.6, 42.0], [92.7, 43.0], [92.8, 43.0], [92.9, 43.0], [93.0, 43.0], [93.1, 43.0], [93.2, 44.0], [93.3, 44.0], [93.4, 44.0], [93.5, 45.0], [93.6, 45.0], [93.7, 45.0], [93.8, 45.0], [93.9, 46.0], [94.0, 46.0], [94.1, 46.0], [94.2, 47.0], [94.3, 47.0], [94.4, 47.0], [94.5, 47.0], [94.6, 48.0], [94.7, 48.0], [94.8, 49.0], [94.9, 49.0], [95.0, 49.0], [95.1, 50.0], [95.2, 50.0], [95.3, 50.0], [95.4, 51.0], [95.5, 51.0], [95.6, 52.0], [95.7, 52.0], [95.8, 53.0], [95.9, 53.0], [96.0, 54.0], [96.1, 54.0], [96.2, 55.0], [96.3, 55.0], [96.4, 56.0], [96.5, 56.0], [96.6, 57.0], [96.7, 57.0], [96.8, 58.0], [96.9, 59.0], [97.0, 59.0], [97.1, 60.0], [97.2, 61.0], [97.3, 62.0], [97.4, 62.0], [97.5, 63.0], [97.6, 64.0], [97.7, 65.0], [97.8, 66.0], [97.9, 67.0], [98.0, 68.0], [98.1, 70.0], [98.2, 71.0], [98.3, 72.0], [98.4, 74.0], [98.5, 76.0], [98.6, 78.0], [98.7, 80.0], [98.8, 82.0], [98.9, 85.0], [99.0, 88.0], [99.1, 92.0], [99.2, 97.0], [99.3, 103.0], [99.4, 113.0], [99.5, 127.0], [99.6, 148.0], [99.7, 180.0], [99.8, 224.0], [99.9, 308.0], [100.0, 2009.0]], "isOverall": false, "label": "SkinPrice Creation", "isController": false}, {"data": [[0.0, 0.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 2.0], [0.6, 2.0], [0.7, 2.0], [0.8, 2.0], [0.9, 2.0], [1.0, 3.0], [1.1, 3.0], [1.2, 3.0], [1.3, 3.0], [1.4, 3.0], [1.5, 3.0], [1.6, 3.0], [1.7, 3.0], [1.8, 3.0], [1.9, 3.0], [2.0, 3.0], [2.1, 3.0], [2.2, 3.0], [2.3, 3.0], [2.4, 3.0], [2.5, 3.0], [2.6, 3.0], [2.7, 3.0], [2.8, 3.0], [2.9, 3.0], [3.0, 3.0], [3.1, 3.0], [3.2, 3.0], [3.3, 3.0], [3.4, 3.0], [3.5, 3.0], [3.6, 3.0], [3.7, 3.0], [3.8, 4.0], [3.9, 4.0], [4.0, 4.0], [4.1, 4.0], [4.2, 4.0], [4.3, 4.0], [4.4, 4.0], [4.5, 4.0], [4.6, 4.0], [4.7, 4.0], [4.8, 4.0], [4.9, 4.0], [5.0, 4.0], [5.1, 4.0], [5.2, 4.0], [5.3, 4.0], [5.4, 4.0], [5.5, 4.0], [5.6, 4.0], [5.7, 4.0], [5.8, 4.0], [5.9, 4.0], [6.0, 4.0], [6.1, 4.0], [6.2, 4.0], [6.3, 4.0], [6.4, 4.0], [6.5, 4.0], [6.6, 4.0], [6.7, 4.0], [6.8, 4.0], [6.9, 4.0], [7.0, 4.0], [7.1, 4.0], [7.2, 4.0], [7.3, 4.0], [7.4, 4.0], [7.5, 4.0], [7.6, 4.0], [7.7, 4.0], [7.8, 4.0], [7.9, 4.0], [8.0, 4.0], [8.1, 4.0], [8.2, 5.0], [8.3, 5.0], [8.4, 5.0], [8.5, 5.0], [8.6, 5.0], [8.7, 5.0], [8.8, 5.0], [8.9, 5.0], [9.0, 5.0], [9.1, 5.0], [9.2, 5.0], [9.3, 5.0], [9.4, 5.0], [9.5, 5.0], [9.6, 5.0], [9.7, 5.0], [9.8, 5.0], [9.9, 5.0], [10.0, 5.0], [10.1, 5.0], [10.2, 5.0], [10.3, 5.0], [10.4, 5.0], [10.5, 5.0], [10.6, 5.0], [10.7, 5.0], [10.8, 5.0], [10.9, 5.0], [11.0, 5.0], [11.1, 5.0], [11.2, 5.0], [11.3, 5.0], [11.4, 5.0], [11.5, 5.0], [11.6, 5.0], [11.7, 5.0], [11.8, 5.0], [11.9, 5.0], [12.0, 5.0], [12.1, 5.0], [12.2, 5.0], [12.3, 5.0], [12.4, 5.0], [12.5, 5.0], [12.6, 5.0], [12.7, 5.0], [12.8, 5.0], [12.9, 5.0], [13.0, 5.0], [13.1, 5.0], [13.2, 5.0], [13.3, 5.0], [13.4, 5.0], [13.5, 5.0], [13.6, 5.0], [13.7, 5.0], [13.8, 6.0], [13.9, 6.0], [14.0, 6.0], [14.1, 6.0], [14.2, 6.0], [14.3, 6.0], [14.4, 6.0], [14.5, 6.0], [14.6, 6.0], [14.7, 6.0], [14.8, 6.0], [14.9, 6.0], [15.0, 6.0], [15.1, 6.0], [15.2, 6.0], [15.3, 6.0], [15.4, 6.0], [15.5, 6.0], [15.6, 6.0], [15.7, 6.0], [15.8, 6.0], [15.9, 6.0], [16.0, 6.0], [16.1, 6.0], [16.2, 6.0], [16.3, 6.0], [16.4, 6.0], [16.5, 6.0], [16.6, 6.0], [16.7, 6.0], [16.8, 6.0], [16.9, 6.0], [17.0, 6.0], [17.1, 6.0], [17.2, 6.0], [17.3, 6.0], [17.4, 6.0], [17.5, 6.0], [17.6, 6.0], [17.7, 6.0], [17.8, 6.0], [17.9, 6.0], [18.0, 6.0], [18.1, 6.0], [18.2, 6.0], [18.3, 6.0], [18.4, 6.0], [18.5, 6.0], [18.6, 6.0], [18.7, 6.0], [18.8, 6.0], [18.9, 6.0], [19.0, 6.0], [19.1, 6.0], [19.2, 6.0], [19.3, 6.0], [19.4, 6.0], [19.5, 6.0], [19.6, 6.0], [19.7, 6.0], [19.8, 6.0], [19.9, 6.0], [20.0, 6.0], [20.1, 6.0], [20.2, 7.0], [20.3, 7.0], [20.4, 7.0], [20.5, 7.0], [20.6, 7.0], [20.7, 7.0], [20.8, 7.0], [20.9, 7.0], [21.0, 7.0], [21.1, 7.0], [21.2, 7.0], [21.3, 7.0], [21.4, 7.0], [21.5, 7.0], [21.6, 7.0], [21.7, 7.0], [21.8, 7.0], [21.9, 7.0], [22.0, 7.0], [22.1, 7.0], [22.2, 7.0], [22.3, 7.0], [22.4, 7.0], [22.5, 7.0], [22.6, 7.0], [22.7, 7.0], [22.8, 7.0], [22.9, 7.0], [23.0, 7.0], [23.1, 7.0], [23.2, 7.0], [23.3, 7.0], [23.4, 7.0], [23.5, 7.0], [23.6, 7.0], [23.7, 7.0], [23.8, 7.0], [23.9, 7.0], [24.0, 7.0], [24.1, 7.0], [24.2, 7.0], [24.3, 7.0], [24.4, 7.0], [24.5, 7.0], [24.6, 7.0], [24.7, 7.0], [24.8, 7.0], [24.9, 7.0], [25.0, 7.0], [25.1, 7.0], [25.2, 7.0], [25.3, 7.0], [25.4, 7.0], [25.5, 7.0], [25.6, 7.0], [25.7, 7.0], [25.8, 7.0], [25.9, 7.0], [26.0, 7.0], [26.1, 7.0], [26.2, 7.0], [26.3, 7.0], [26.4, 7.0], [26.5, 7.0], [26.6, 7.0], [26.7, 7.0], [26.8, 7.0], [26.9, 7.0], [27.0, 7.0], [27.1, 8.0], [27.2, 8.0], [27.3, 8.0], [27.4, 8.0], [27.5, 8.0], [27.6, 8.0], [27.7, 8.0], [27.8, 8.0], [27.9, 8.0], [28.0, 8.0], [28.1, 8.0], [28.2, 8.0], [28.3, 8.0], [28.4, 8.0], [28.5, 8.0], [28.6, 8.0], [28.7, 8.0], [28.8, 8.0], [28.9, 8.0], [29.0, 8.0], [29.1, 8.0], [29.2, 8.0], [29.3, 8.0], [29.4, 8.0], [29.5, 8.0], [29.6, 8.0], [29.7, 8.0], [29.8, 8.0], [29.9, 8.0], [30.0, 8.0], [30.1, 8.0], [30.2, 8.0], [30.3, 8.0], [30.4, 8.0], [30.5, 8.0], [30.6, 8.0], [30.7, 8.0], [30.8, 8.0], [30.9, 8.0], [31.0, 8.0], [31.1, 8.0], [31.2, 8.0], [31.3, 8.0], [31.4, 8.0], [31.5, 8.0], [31.6, 8.0], [31.7, 8.0], [31.8, 8.0], [31.9, 8.0], [32.0, 8.0], [32.1, 8.0], [32.2, 8.0], [32.3, 8.0], [32.4, 8.0], [32.5, 8.0], [32.6, 8.0], [32.7, 8.0], [32.8, 8.0], [32.9, 8.0], [33.0, 8.0], [33.1, 8.0], [33.2, 8.0], [33.3, 8.0], [33.4, 8.0], [33.5, 8.0], [33.6, 8.0], [33.7, 8.0], [33.8, 8.0], [33.9, 8.0], [34.0, 8.0], [34.1, 9.0], [34.2, 9.0], [34.3, 9.0], [34.4, 9.0], [34.5, 9.0], [34.6, 9.0], [34.7, 9.0], [34.8, 9.0], [34.9, 9.0], [35.0, 9.0], [35.1, 9.0], [35.2, 9.0], [35.3, 9.0], [35.4, 9.0], [35.5, 9.0], [35.6, 9.0], [35.7, 9.0], [35.8, 9.0], [35.9, 9.0], [36.0, 9.0], [36.1, 9.0], [36.2, 9.0], [36.3, 9.0], [36.4, 9.0], [36.5, 9.0], [36.6, 9.0], [36.7, 9.0], [36.8, 9.0], [36.9, 9.0], [37.0, 9.0], [37.1, 9.0], [37.2, 9.0], [37.3, 9.0], [37.4, 9.0], [37.5, 9.0], [37.6, 9.0], [37.7, 9.0], [37.8, 9.0], [37.9, 9.0], [38.0, 9.0], [38.1, 9.0], [38.2, 9.0], [38.3, 9.0], [38.4, 9.0], [38.5, 9.0], [38.6, 9.0], [38.7, 9.0], [38.8, 9.0], [38.9, 9.0], [39.0, 9.0], [39.1, 9.0], [39.2, 9.0], [39.3, 9.0], [39.4, 9.0], [39.5, 9.0], [39.6, 9.0], [39.7, 9.0], [39.8, 9.0], [39.9, 9.0], [40.0, 9.0], [40.1, 9.0], [40.2, 9.0], [40.3, 9.0], [40.4, 9.0], [40.5, 9.0], [40.6, 9.0], [40.7, 9.0], [40.8, 9.0], [40.9, 10.0], [41.0, 10.0], [41.1, 10.0], [41.2, 10.0], [41.3, 10.0], [41.4, 10.0], [41.5, 10.0], [41.6, 10.0], [41.7, 10.0], [41.8, 10.0], [41.9, 10.0], [42.0, 10.0], [42.1, 10.0], [42.2, 10.0], [42.3, 10.0], [42.4, 10.0], [42.5, 10.0], [42.6, 10.0], [42.7, 10.0], [42.8, 10.0], [42.9, 10.0], [43.0, 10.0], [43.1, 10.0], [43.2, 10.0], [43.3, 10.0], [43.4, 10.0], [43.5, 10.0], [43.6, 10.0], [43.7, 10.0], [43.8, 10.0], [43.9, 10.0], [44.0, 10.0], [44.1, 10.0], [44.2, 10.0], [44.3, 10.0], [44.4, 10.0], [44.5, 10.0], [44.6, 10.0], [44.7, 10.0], [44.8, 10.0], [44.9, 10.0], [45.0, 10.0], [45.1, 10.0], [45.2, 10.0], [45.3, 10.0], [45.4, 10.0], [45.5, 10.0], [45.6, 10.0], [45.7, 10.0], [45.8, 10.0], [45.9, 10.0], [46.0, 10.0], [46.1, 10.0], [46.2, 10.0], [46.3, 10.0], [46.4, 10.0], [46.5, 10.0], [46.6, 10.0], [46.7, 10.0], [46.8, 10.0], [46.9, 10.0], [47.0, 10.0], [47.1, 10.0], [47.2, 11.0], [47.3, 11.0], [47.4, 11.0], [47.5, 11.0], [47.6, 11.0], [47.7, 11.0], [47.8, 11.0], [47.9, 11.0], [48.0, 11.0], [48.1, 11.0], [48.2, 11.0], [48.3, 11.0], [48.4, 11.0], [48.5, 11.0], [48.6, 11.0], [48.7, 11.0], [48.8, 11.0], [48.9, 11.0], [49.0, 11.0], [49.1, 11.0], [49.2, 11.0], [49.3, 11.0], [49.4, 11.0], [49.5, 11.0], [49.6, 11.0], [49.7, 11.0], [49.8, 11.0], [49.9, 11.0], [50.0, 11.0], [50.1, 11.0], [50.2, 11.0], [50.3, 11.0], [50.4, 11.0], [50.5, 11.0], [50.6, 11.0], [50.7, 11.0], [50.8, 11.0], [50.9, 11.0], [51.0, 11.0], [51.1, 11.0], [51.2, 11.0], [51.3, 11.0], [51.4, 11.0], [51.5, 11.0], [51.6, 11.0], [51.7, 11.0], [51.8, 11.0], [51.9, 11.0], [52.0, 11.0], [52.1, 11.0], [52.2, 11.0], [52.3, 11.0], [52.4, 11.0], [52.5, 11.0], [52.6, 11.0], [52.7, 11.0], [52.8, 11.0], [52.9, 11.0], [53.0, 12.0], [53.1, 12.0], [53.2, 12.0], [53.3, 12.0], [53.4, 12.0], [53.5, 12.0], [53.6, 12.0], [53.7, 12.0], [53.8, 12.0], [53.9, 12.0], [54.0, 12.0], [54.1, 12.0], [54.2, 12.0], [54.3, 12.0], [54.4, 12.0], [54.5, 12.0], [54.6, 12.0], [54.7, 12.0], [54.8, 12.0], [54.9, 12.0], [55.0, 12.0], [55.1, 12.0], [55.2, 12.0], [55.3, 12.0], [55.4, 12.0], [55.5, 12.0], [55.6, 12.0], [55.7, 12.0], [55.8, 12.0], [55.9, 12.0], [56.0, 12.0], [56.1, 12.0], [56.2, 12.0], [56.3, 12.0], [56.4, 12.0], [56.5, 12.0], [56.6, 12.0], [56.7, 12.0], [56.8, 12.0], [56.9, 12.0], [57.0, 12.0], [57.1, 12.0], [57.2, 12.0], [57.3, 12.0], [57.4, 12.0], [57.5, 12.0], [57.6, 12.0], [57.7, 12.0], [57.8, 12.0], [57.9, 12.0], [58.0, 12.0], [58.1, 13.0], [58.2, 13.0], [58.3, 13.0], [58.4, 13.0], [58.5, 13.0], [58.6, 13.0], [58.7, 13.0], [58.8, 13.0], [58.9, 13.0], [59.0, 13.0], [59.1, 13.0], [59.2, 13.0], [59.3, 13.0], [59.4, 13.0], [59.5, 13.0], [59.6, 13.0], [59.7, 13.0], [59.8, 13.0], [59.9, 13.0], [60.0, 13.0], [60.1, 13.0], [60.2, 13.0], [60.3, 13.0], [60.4, 13.0], [60.5, 13.0], [60.6, 13.0], [60.7, 13.0], [60.8, 13.0], [60.9, 13.0], [61.0, 13.0], [61.1, 13.0], [61.2, 13.0], [61.3, 13.0], [61.4, 13.0], [61.5, 13.0], [61.6, 13.0], [61.7, 13.0], [61.8, 13.0], [61.9, 13.0], [62.0, 13.0], [62.1, 13.0], [62.2, 13.0], [62.3, 13.0], [62.4, 13.0], [62.5, 14.0], [62.6, 14.0], [62.7, 14.0], [62.8, 14.0], [62.9, 14.0], [63.0, 14.0], [63.1, 14.0], [63.2, 14.0], [63.3, 14.0], [63.4, 14.0], [63.5, 14.0], [63.6, 14.0], [63.7, 14.0], [63.8, 14.0], [63.9, 14.0], [64.0, 14.0], [64.1, 14.0], [64.2, 14.0], [64.3, 14.0], [64.4, 14.0], [64.5, 14.0], [64.6, 14.0], [64.7, 14.0], [64.8, 14.0], [64.9, 14.0], [65.0, 14.0], [65.1, 14.0], [65.2, 14.0], [65.3, 14.0], [65.4, 14.0], [65.5, 14.0], [65.6, 14.0], [65.7, 14.0], [65.8, 14.0], [65.9, 14.0], [66.0, 14.0], [66.1, 14.0], [66.2, 14.0], [66.3, 14.0], [66.4, 15.0], [66.5, 15.0], [66.6, 15.0], [66.7, 15.0], [66.8, 15.0], [66.9, 15.0], [67.0, 15.0], [67.1, 15.0], [67.2, 15.0], [67.3, 15.0], [67.4, 15.0], [67.5, 15.0], [67.6, 15.0], [67.7, 15.0], [67.8, 15.0], [67.9, 15.0], [68.0, 15.0], [68.1, 15.0], [68.2, 15.0], [68.3, 15.0], [68.4, 15.0], [68.5, 15.0], [68.6, 15.0], [68.7, 15.0], [68.8, 15.0], [68.9, 15.0], [69.0, 15.0], [69.1, 15.0], [69.2, 15.0], [69.3, 15.0], [69.4, 15.0], [69.5, 15.0], [69.6, 16.0], [69.7, 16.0], [69.8, 16.0], [69.9, 16.0], [70.0, 16.0], [70.1, 16.0], [70.2, 16.0], [70.3, 16.0], [70.4, 16.0], [70.5, 16.0], [70.6, 16.0], [70.7, 16.0], [70.8, 16.0], [70.9, 16.0], [71.0, 16.0], [71.1, 16.0], [71.2, 16.0], [71.3, 16.0], [71.4, 16.0], [71.5, 16.0], [71.6, 16.0], [71.7, 16.0], [71.8, 16.0], [71.9, 16.0], [72.0, 16.0], [72.1, 16.0], [72.2, 16.0], [72.3, 16.0], [72.4, 16.0], [72.5, 17.0], [72.6, 17.0], [72.7, 17.0], [72.8, 17.0], [72.9, 17.0], [73.0, 17.0], [73.1, 17.0], [73.2, 17.0], [73.3, 17.0], [73.4, 17.0], [73.5, 17.0], [73.6, 17.0], [73.7, 17.0], [73.8, 17.0], [73.9, 17.0], [74.0, 17.0], [74.1, 17.0], [74.2, 17.0], [74.3, 17.0], [74.4, 17.0], [74.5, 17.0], [74.6, 17.0], [74.7, 17.0], [74.8, 17.0], [74.9, 18.0], [75.0, 18.0], [75.1, 18.0], [75.2, 18.0], [75.3, 18.0], [75.4, 18.0], [75.5, 18.0], [75.6, 18.0], [75.7, 18.0], [75.8, 18.0], [75.9, 18.0], [76.0, 18.0], [76.1, 18.0], [76.2, 18.0], [76.3, 18.0], [76.4, 18.0], [76.5, 18.0], [76.6, 18.0], [76.7, 18.0], [76.8, 18.0], [76.9, 18.0], [77.0, 19.0], [77.1, 19.0], [77.2, 19.0], [77.3, 19.0], [77.4, 19.0], [77.5, 19.0], [77.6, 19.0], [77.7, 19.0], [77.8, 19.0], [77.9, 19.0], [78.0, 19.0], [78.1, 19.0], [78.2, 19.0], [78.3, 19.0], [78.4, 19.0], [78.5, 19.0], [78.6, 19.0], [78.7, 19.0], [78.8, 19.0], [78.9, 20.0], [79.0, 20.0], [79.1, 20.0], [79.2, 20.0], [79.3, 20.0], [79.4, 20.0], [79.5, 20.0], [79.6, 20.0], [79.7, 20.0], [79.8, 20.0], [79.9, 20.0], [80.0, 20.0], [80.1, 20.0], [80.2, 20.0], [80.3, 20.0], [80.4, 20.0], [80.5, 20.0], [80.6, 21.0], [80.7, 21.0], [80.8, 21.0], [80.9, 21.0], [81.0, 21.0], [81.1, 21.0], [81.2, 21.0], [81.3, 21.0], [81.4, 21.0], [81.5, 21.0], [81.6, 21.0], [81.7, 21.0], [81.8, 21.0], [81.9, 21.0], [82.0, 21.0], [82.1, 22.0], [82.2, 22.0], [82.3, 22.0], [82.4, 22.0], [82.5, 22.0], [82.6, 22.0], [82.7, 22.0], [82.8, 22.0], [82.9, 22.0], [83.0, 22.0], [83.1, 22.0], [83.2, 22.0], [83.3, 22.0], [83.4, 22.0], [83.5, 23.0], [83.6, 23.0], [83.7, 23.0], [83.8, 23.0], [83.9, 23.0], [84.0, 23.0], [84.1, 23.0], [84.2, 23.0], [84.3, 23.0], [84.4, 23.0], [84.5, 23.0], [84.6, 23.0], [84.7, 23.0], [84.8, 24.0], [84.9, 24.0], [85.0, 24.0], [85.1, 24.0], [85.2, 24.0], [85.3, 24.0], [85.4, 24.0], [85.5, 24.0], [85.6, 24.0], [85.7, 24.0], [85.8, 24.0], [85.9, 24.0], [86.0, 25.0], [86.1, 25.0], [86.2, 25.0], [86.3, 25.0], [86.4, 25.0], [86.5, 25.0], [86.6, 25.0], [86.7, 25.0], [86.8, 25.0], [86.9, 25.0], [87.0, 26.0], [87.1, 26.0], [87.2, 26.0], [87.3, 26.0], [87.4, 26.0], [87.5, 26.0], [87.6, 26.0], [87.7, 26.0], [87.8, 26.0], [87.9, 26.0], [88.0, 27.0], [88.1, 27.0], [88.2, 27.0], [88.3, 27.0], [88.4, 27.0], [88.5, 27.0], [88.6, 27.0], [88.7, 27.0], [88.8, 27.0], [88.9, 27.0], [89.0, 28.0], [89.1, 28.0], [89.2, 28.0], [89.3, 28.0], [89.4, 28.0], [89.5, 28.0], [89.6, 28.0], [89.7, 28.0], [89.8, 29.0], [89.9, 29.0], [90.0, 29.0], [90.1, 29.0], [90.2, 29.0], [90.3, 29.0], [90.4, 29.0], [90.5, 29.0], [90.6, 30.0], [90.7, 30.0], [90.8, 30.0], [90.9, 30.0], [91.0, 30.0], [91.1, 30.0], [91.2, 30.0], [91.3, 30.0], [91.4, 31.0], [91.5, 31.0], [91.6, 31.0], [91.7, 31.0], [91.8, 31.0], [91.9, 31.0], [92.0, 31.0], [92.1, 32.0], [92.2, 32.0], [92.3, 32.0], [92.4, 32.0], [92.5, 32.0], [92.6, 32.0], [92.7, 33.0], [92.8, 33.0], [92.9, 33.0], [93.0, 33.0], [93.1, 33.0], [93.2, 33.0], [93.3, 34.0], [93.4, 34.0], [93.5, 34.0], [93.6, 34.0], [93.7, 34.0], [93.8, 35.0], [93.9, 35.0], [94.0, 35.0], [94.1, 35.0], [94.2, 35.0], [94.3, 36.0], [94.4, 36.0], [94.5, 36.0], [94.6, 36.0], [94.7, 37.0], [94.8, 37.0], [94.9, 37.0], [95.0, 37.0], [95.1, 38.0], [95.2, 38.0], [95.3, 38.0], [95.4, 38.0], [95.5, 39.0], [95.6, 39.0], [95.7, 39.0], [95.8, 40.0], [95.9, 40.0], [96.0, 40.0], [96.1, 41.0], [96.2, 41.0], [96.3, 41.0], [96.4, 42.0], [96.5, 42.0], [96.6, 42.0], [96.7, 43.0], [96.8, 43.0], [96.9, 44.0], [97.0, 44.0], [97.1, 44.0], [97.2, 45.0], [97.3, 45.0], [97.4, 46.0], [97.5, 46.0], [97.6, 47.0], [97.7, 48.0], [97.8, 48.0], [97.9, 49.0], [98.0, 49.0], [98.1, 50.0], [98.2, 51.0], [98.3, 52.0], [98.4, 52.0], [98.5, 53.0], [98.6, 54.0], [98.7, 55.0], [98.8, 56.0], [98.9, 58.0], [99.0, 59.0], [99.1, 60.0], [99.2, 62.0], [99.3, 64.0], [99.4, 66.0], [99.5, 69.0], [99.6, 72.0], [99.7, 76.0], [99.8, 83.0], [99.9, 94.0]], "isOverall": false, "label": "SkinPrice Find By ID", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 4064054.0, "series": [{"data": [[0.0, 4036366.0], [600.0, 157.0], [700.0, 95.0], [200.0, 5584.0], [800.0, 10.0], [300.0, 2537.0], [100.0, 20806.0], [400.0, 1042.0], [1600.0, 2.0], [1700.0, 83.0], [1800.0, 5.0], [1900.0, 4.0], [500.0, 424.0], [2000.0, 1.0]], "isOverall": false, "label": "SkinPrice Creation", "isController": false}, {"data": [[0.0, 4064054.0], [300.0, 37.0], [1300.0, 4.0], [1400.0, 1.0], [100.0, 2859.0], [200.0, 90.0], [400.0, 4.0]], "isOverall": false, "label": "SkinPrice Find By ID", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 8133383.0, "series": [{"data": [[0.0, 8133383.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 683.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 95.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 95.28518521506966, "minX": 1.54569852E12, "maxY": 100.0, "series": [{"data": [[1.54569978E12, 100.0], [1.54569918E12, 100.0], [1.54569948E12, 100.0], [1.54569906E12, 100.0], [1.54569936E12, 100.0], [1.54569876E12, 100.0], [1.54569864E12, 100.0], [1.54569996E12, 99.99406452615494], [1.54569966E12, 100.0], [1.54569984E12, 100.0], [1.54569954E12, 100.0], [1.54569894E12, 100.0], [1.54569924E12, 100.0], [1.54569882E12, 100.0], [1.54569912E12, 100.0], [1.54569852E12, 95.28518521506966], [1.54569972E12, 100.0], [1.54569942E12, 100.0], [1.5456996E12, 100.0], [1.5456993E12, 100.0], [1.5456987E12, 100.0], [1.545699E12, 100.0], [1.54569858E12, 100.0], [1.54569888E12, 100.0], [1.5456999E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54569996E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.9999999999999999, "minX": 1.0, "maxY": 47.05263157894737, "series": [{"data": [[2.0, 1.5357142857142858], [3.0, 1.5555555555555554], [4.0, 1.5964912280701755], [5.0, 1.8059701492537312], [6.0, 1.9466666666666668], [7.0, 1.8214285714285714], [8.0, 2.0520833333333335], [9.0, 2.3370786516853945], [10.0, 2.637362637362638], [11.0, 2.831578947368421], [12.0, 3.3170731707317076], [13.0, 3.0294117647058822], [14.0, 3.3235294117647065], [15.0, 3.2135922330097078], [16.0, 3.0078740157480306], [17.0, 3.0444444444444447], [18.0, 3.3307086614173245], [19.0, 3.6666666666666674], [20.0, 4.0], [21.0, 3.752], [22.0, 3.9090909090909074], [23.0, 4.032], [24.0, 4.134751773049648], [25.0, 5.180327868852461], [26.0, 4.255319148936168], [27.0, 4.956521739130435], [28.0, 4.7132352941176485], [29.0, 5.041666666666667], [30.0, 4.918518518518521], [31.0, 5.4620689655172425], [32.0, 5.308724832214764], [33.0, 5.428571428571428], [34.0, 5.784], [35.0, 5.773584905660376], [36.0, 6.293233082706765], [37.0, 10.876543209876544], [38.0, 7.769841269841269], [39.0, 6.640845070422536], [40.0, 8.142857142857137], [41.0, 7.150000000000002], [42.0, 7.592307692307694], [43.0, 8.52459016393443], [44.0, 8.296000000000003], [45.0, 8.07971014492754], [46.0, 7.9701492537313445], [47.0, 8.810810810810812], [48.0, 8.737226277372264], [49.0, 8.380281690140848], [50.0, 9.187500000000002], [51.0, 8.517985611510793], [52.0, 11.575000000000005], [53.0, 9.772058823529411], [54.0, 9.165562913907284], [55.0, 9.67669172932331], [56.0, 9.525714285714285], [57.0, 9.692307692307686], [58.0, 9.529801324503309], [59.0, 9.866666666666667], [60.0, 12.965753424657537], [61.0, 10.476190476190474], [62.0, 10.741935483870972], [63.0, 11.027210884353744], [64.0, 10.819354838709668], [65.0, 10.379310344827585], [66.0, 10.658064516129034], [67.0, 11.459999999999999], [68.0, 11.138364779874212], [69.0, 13.3125], [70.0, 11.331034482758616], [71.0, 12.105882352941176], [72.0, 33.97701149425289], [73.0, 11.79881656804734], [74.0, 12.166666666666668], [75.0, 11.941176470588236], [76.0, 12.815602836879432], [77.0, 13.012987012987018], [78.0, 15.395833333333329], [79.0, 13.465838509316768], [80.0, 13.253333333333332], [81.0, 14.23684210526316], [82.0, 13.54487179487179], [83.0, 13.748466257668712], [84.0, 14.770370370370374], [85.0, 14.047058823529412], [86.0, 15.000000000000004], [87.0, 17.856115107913652], [88.0, 15.470198675496695], [89.0, 16.396226415094326], [90.0, 15.806896551724138], [91.0, 15.941176470588232], [92.0, 16.594936708860764], [93.0, 29.28467153284671], [94.0, 47.05263157894737], [95.0, 43.220338983050866], [96.0, 17.801282051282058], [97.0, 14.269938650306743], [98.0, 18.5], [99.0, 24.637931034482765], [100.0, 20.770674466405584], [1.0, 1.9285714285714286]], "isOverall": false, "label": "SkinPrice Creation", "isController": false}, {"data": [[99.8558912507065, 20.737850112953105]], "isOverall": false, "label": "SkinPrice Creation-Aggregated", "isController": false}, {"data": [[2.0, 1.0], [3.0, 0.9999999999999999], [4.0, 1.0178571428571432], [5.0, 1.1515151515151514], [6.0, 1.1333333333333333], [7.0, 1.2588235294117647], [8.0, 1.2765957446808511], [9.0, 1.5714285714285716], [10.0, 1.6555555555555548], [11.0, 1.9239130434782605], [12.0, 2.3139534883720927], [13.0, 2.207920792079209], [14.0, 2.15], [15.0, 2.568627450980392], [16.0, 2.007751937984496], [17.0, 2.0839694656488557], [18.0, 2.310077519379846], [19.0, 2.608695652173913], [20.0, 2.7322834645669283], [21.0, 2.872], [22.0, 2.897810218978102], [23.0, 3.103174603174603], [24.0, 3.124087591240877], [25.0, 3.288135593220339], [26.0, 3.073825503355706], [27.0, 3.534883720930233], [28.0, 3.3404255319148928], [29.0, 3.528985507246377], [30.0, 3.7449664429530207], [31.0, 4.085937500000001], [32.0, 3.6733333333333325], [33.0, 4.097744360902252], [34.0, 5.4925373134328375], [35.0, 4.148648648648649], [36.0, 4.750000000000001], [37.0, 7.445783132530119], [38.0, 5.283333333333332], [39.0, 4.943661971830985], [40.0, 7.160714285714291], [41.0, 5.234848484848486], [42.0, 5.705882352941176], [43.0, 6.227642276422764], [44.0, 5.962121212121212], [45.0, 6.300751879699245], [46.0, 6.992592592592594], [47.0, 5.873239436619716], [48.0, 5.98496240601504], [49.0, 6.339869281045754], [50.0, 7.029850746268657], [51.0, 6.503546099290777], [52.0, 6.88235294117647], [53.0, 6.169117647058823], [54.0, 7.283870967741937], [55.0, 6.639455782312923], [56.0, 7.135714285714286], [57.0, 7.516778523489931], [58.0, 7.543046357615892], [59.0, 7.707070707070705], [60.0, 9.163398692810457], [61.0, 7.893617021276594], [62.0, 7.648648648648648], [63.0, 7.986394557823126], [64.0, 8.192307692307692], [65.0, 8.058823529411766], [66.0, 8.363636363636358], [67.0, 8.973856209150332], [68.0, 8.845637583892616], [69.0, 10.801724137931034], [70.0, 11.000000000000002], [71.0, 9.072072072072066], [72.0, 14.915662650602405], [73.0, 9.89726027397261], [74.0, 9.918749999999996], [75.0, 9.697368421052627], [76.0, 9.912408759124085], [77.0, 11.155279503105586], [78.0, 10.283687943262413], [79.0, 12.218750000000002], [80.0, 10.605633802816897], [81.0, 12.071428571428573], [82.0, 10.324840764331206], [83.0, 10.929936305732486], [84.0, 12.372549019607836], [85.0, 11.567567567567565], [86.0, 11.90076335877863], [87.0, 13.507692307692308], [88.0, 11.696969696969695], [89.0, 11.4375], [90.0, 12.458598726114648], [91.0, 12.158620689655178], [92.0, 12.012195121951219], [93.0, 16.54237288135594], [94.0, 31.772727272727273], [95.0, 24.887999999999998], [96.0, 15.761194029850738], [97.0, 13.023529411764706], [98.0, 20.555555555555554], [99.0, 21.839779005524857], [100.0, 14.51485587823693], [1.0, 1.076923076923077]], "isOverall": false, "label": "SkinPrice Find By ID", "isController": false}, {"data": [[99.85641972840793, 14.493708337421577]], "isOverall": false, "label": "SkinPrice Find By ID-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 271250.5833333333, "minX": 1.54569852E12, "maxY": 1527883.0, "series": [{"data": [[1.54569978E12, 320816.86666666664], [1.54569918E12, 352999.8333333333], [1.54569948E12, 374223.85], [1.54569906E12, 383241.6], [1.54569936E12, 390958.75], [1.54569876E12, 439284.4], [1.54569864E12, 431468.6], [1.54569996E12, 271250.5833333333], [1.54569966E12, 382740.31666666665], [1.54569984E12, 366440.73333333334], [1.54569954E12, 384480.85], [1.54569894E12, 414794.7], [1.54569924E12, 349285.43333333335], [1.54569882E12, 429318.7166666667], [1.54569912E12, 375451.0333333333], [1.54569852E12, 290925.3333333333], [1.54569972E12, 393440.8], [1.54569942E12, 385726.6], [1.5456996E12, 383480.3333333333], [1.5456993E12, 389676.85], [1.5456987E12, 432483.63333333336], [1.545699E12, 388138.25], [1.54569858E12, 433602.6666666667], [1.54569888E12, 429386.73333333334], [1.5456999E12, 347152.9666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.54569978E12, 1118787.0833333333], [1.54569918E12, 1228150.6], [1.54569948E12, 1302302.3], [1.54569906E12, 1332920.95], [1.54569936E12, 1360944.1333333333], [1.54569876E12, 1527883.0], [1.54569864E12, 1499519.9166666667], [1.54569996E12, 945938.1666666666], [1.54569966E12, 1333229.7166666666], [1.54569984E12, 1276687.1333333333], [1.54569954E12, 1339995.8833333333], [1.54569894E12, 1441706.4], [1.54569924E12, 1217197.8833333333], [1.54569882E12, 1494105.3333333333], [1.54569912E12, 1305777.75], [1.54569852E12, 1009189.45], [1.54569972E12, 1370485.7833333334], [1.54569942E12, 1344754.9666666666], [1.5456996E12, 1334620.4], [1.5456993E12, 1356494.7666666666], [1.5456987E12, 1504989.9], [1.545699E12, 1349996.9666666666], [1.54569858E12, 1506521.75], [1.54569888E12, 1493658.5833333333], [1.5456999E12, 1209153.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54569996E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 12.761608483029352, "minX": 1.54569852E12, "maxY": 27.743650579277194, "series": [{"data": [[1.54569978E12, 27.743650579277194], [1.54569918E12, 23.519408404434262], [1.54569948E12, 21.631524820026574], [1.54569906E12, 21.04551024409329], [1.54569936E12, 20.44824296104234], [1.54569876E12, 18.06713382400886], [1.54569864E12, 18.453875421241264], [1.54569996E12, 20.82666344394197], [1.54569966E12, 21.03688163085254], [1.54569984E12, 23.94694692133569], [1.54569954E12, 20.85362003498414], [1.54569894E12, 19.3566658169771], [1.54569924E12, 24.316801062645315], [1.54569882E12, 18.71840462629958], [1.54569912E12, 21.595074298294165], [1.54569852E12, 17.224232792281107], [1.54569972E12, 20.159808127756197], [1.54569942E12, 20.50256569079335], [1.5456996E12, 21.059653910638815], [1.5456993E12, 20.426560543300518], [1.5456987E12, 18.23323132684429], [1.545699E12, 20.465049876895673], [1.54569858E12, 18.2963225429523], [1.54569888E12, 18.632700592647286], [1.5456999E12, 25.289030262509453]], "isOverall": false, "label": "SkinPrice Creation", "isController": false}, {"data": [[1.54569978E12, 15.111072187068887], [1.54569918E12, 15.611827671032493], [1.54569948E12, 15.304641741813375], [1.54569906E12, 15.009269924516923], [1.54569936E12, 14.907941003516564], [1.54569876E12, 13.367454166444062], [1.54569864E12, 13.524294743249152], [1.54569996E12, 14.963527725490971], [1.54569966E12, 14.990113747036867], [1.54569984E12, 13.889888948594002], [1.54569954E12, 15.067453594803101], [1.54569894E12, 13.997739888976952], [1.54569924E12, 15.24189370554286], [1.54569882E12, 13.434808037080776], [1.54569912E12, 15.253697924159042], [1.54569852E12, 12.761608483029352], [1.54569972E12, 14.941582394269554], [1.54569942E12, 15.260244271285702], [1.5456996E12, 14.990129847878727], [1.5456993E12, 15.030123890822136], [1.5456987E12, 13.690828490659294], [1.545699E12, 15.203911510099259], [1.54569858E12, 13.436686467361254], [1.54569888E12, 13.48313949355605], [1.5456999E12, 14.633521115344156]], "isOverall": false, "label": "SkinPrice Find By ID", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54569996E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.9198421536822817, "minX": 1.54569852E12, "maxY": 27.743416970236616, "series": [{"data": [[1.54569978E12, 27.743416970236616], [1.54569918E12, 23.51920225040433], [1.54569948E12, 21.631248902601083], [1.54569906E12, 21.045277423782125], [1.54569936E12, 20.447978925134002], [1.54569876E12, 18.06693071212106], [1.54569864E12, 18.45367431242545], [1.54569996E12, 20.826197299816904], [1.54569966E12, 21.03666111288077], [1.54569984E12, 23.94669745544736], [1.54569954E12, 20.853394525607555], [1.54569894E12, 19.356478885207338], [1.54569924E12, 24.316566261019258], [1.54569882E12, 18.718224253090614], [1.54569912E12, 21.594761595036502], [1.54569852E12, 17.224031107812284], [1.54569972E12, 20.15959361220363], [1.54569942E12, 20.502341003078925], [1.5456996E12, 21.05946422233911], [1.5456993E12, 20.42633778056034], [1.5456987E12, 18.23299258825206], [1.545699E12, 20.46487444572815], [1.54569858E12, 18.29616025446857], [1.54569888E12, 18.63252017407637], [1.5456999E12, 25.288820903485355]], "isOverall": false, "label": "SkinPrice Creation", "isController": false}, {"data": [[1.54569978E12, 1.0402061028032472], [1.54569918E12, 1.0967289408948686], [1.54569948E12, 1.086752034916487], [1.54569906E12, 1.0753663856484634], [1.54569936E12, 1.054190118448991], [1.54569876E12, 0.9460206317815057], [1.54569864E12, 0.9562689187059595], [1.54569996E12, 1.0131417617904686], [1.54569966E12, 1.0442982536736547], [1.54569984E12, 0.9673114812824646], [1.54569954E12, 1.0358505283427988], [1.54569894E12, 0.9992636229749595], [1.54569924E12, 1.063112333914918], [1.54569882E12, 0.9419683851502154], [1.54569912E12, 1.07210717569283], [1.54569852E12, 0.9198421536822817], [1.54569972E12, 1.0350160003337239], [1.54569942E12, 1.0525347245419325], [1.5456996E12, 1.0507581598560773], [1.5456993E12, 1.0522592918116136], [1.5456987E12, 0.9700595228406159], [1.545699E12, 1.0747034305867078], [1.54569858E12, 0.9622867097304619], [1.54569888E12, 0.955479732944015], [1.5456999E12, 1.0126786631001683]], "isOverall": false, "label": "SkinPrice Find By ID", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54569996E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.54569852E12, "maxY": 0.1294687046449633, "series": [{"data": [[1.54569978E12, 0.12763813959600226], [1.54569918E12, 0.1270241333218058], [1.54569948E12, 0.12936764742769827], [1.54569906E12, 0.12620698951083387], [1.54569936E12, 0.12557907875470894], [1.54569876E12, 0.11589136721025861], [1.54569864E12, 0.11634960321774002], [1.54569996E12, 0.12749905044715437], [1.54569966E12, 0.125297086712567], [1.54569984E12, 0.12088861028311346], [1.54569954E12, 0.12532226508931885], [1.54569894E12, 0.12264423485427711], [1.54569924E12, 0.12802726382310767], [1.54569882E12, 0.11965849339178172], [1.54569912E12, 0.12815204883173953], [1.54569852E12, 0.11744489980315556], [1.54569972E12, 0.12485401024907762], [1.54569942E12, 0.1294687046449633], [1.5456996E12, 0.1251024928713932], [1.5456993E12, 0.1258549272709759], [1.5456987E12, 0.11855541448275132], [1.545699E12, 0.12643142758624845], [1.54569858E12, 0.11802159518760469], [1.54569888E12, 0.11692216852187931], [1.5456999E12, 0.1280061592074086]], "isOverall": false, "label": "SkinPrice Creation", "isController": false}, {"data": [[1.54569978E12, 0.0], [1.54569918E12, 0.0], [1.54569948E12, 0.0], [1.54569906E12, 0.0], [1.54569936E12, 0.0], [1.54569876E12, 0.0], [1.54569864E12, 0.0], [1.54569996E12, 0.0], [1.54569966E12, 0.0], [1.54569984E12, 0.0], [1.54569954E12, 0.0], [1.54569894E12, 0.0], [1.54569924E12, 0.0], [1.54569882E12, 0.0], [1.54569912E12, 0.0], [1.54569852E12, 0.0], [1.54569972E12, 0.0], [1.54569942E12, 0.0], [1.5456996E12, 0.0], [1.5456993E12, 0.0], [1.5456987E12, 0.0], [1.545699E12, 0.0], [1.54569858E12, 0.0], [1.54569888E12, 0.0], [1.5456999E12, 0.0]], "isOverall": false, "label": "SkinPrice Find By ID", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54569996E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.54569852E12, "maxY": 2009.0, "series": [{"data": [[1.54569978E12, 882.0], [1.54569918E12, 569.0], [1.54569948E12, 464.0], [1.54569906E12, 233.0], [1.54569936E12, 253.0], [1.54569876E12, 153.0], [1.54569864E12, 388.0], [1.54569996E12, 230.0], [1.54569966E12, 253.0], [1.54569984E12, 2009.0], [1.54569954E12, 398.0], [1.54569894E12, 398.0], [1.54569924E12, 498.0], [1.54569882E12, 216.0], [1.54569912E12, 449.0], [1.54569852E12, 225.0], [1.54569972E12, 176.0], [1.54569942E12, 285.0], [1.5456996E12, 621.0], [1.5456993E12, 225.0], [1.5456987E12, 171.0], [1.545699E12, 311.0], [1.54569858E12, 325.0], [1.54569888E12, 301.0], [1.5456999E12, 722.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.54569978E12, 1.0], [1.54569918E12, 1.0], [1.54569948E12, 1.0], [1.54569906E12, 1.0], [1.54569936E12, 1.0], [1.54569876E12, 1.0], [1.54569864E12, 1.0], [1.54569996E12, 1.0], [1.54569966E12, 1.0], [1.54569984E12, 1.0], [1.54569954E12, 1.0], [1.54569894E12, 1.0], [1.54569924E12, 1.0], [1.54569882E12, 1.0], [1.54569912E12, 0.0], [1.54569852E12, 0.0], [1.54569972E12, 1.0], [1.54569942E12, 1.0], [1.5456996E12, 1.0], [1.5456993E12, 1.0], [1.5456987E12, 1.0], [1.545699E12, 1.0], [1.54569858E12, 1.0], [1.54569888E12, 1.0], [1.5456999E12, 1.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.54569978E12, 248.0], [1.54569918E12, 49.0], [1.54569948E12, 41.0], [1.54569906E12, 32.0], [1.54569936E12, 34.0], [1.54569876E12, 30.0], [1.54569864E12, 31.0], [1.54569996E12, 34.0], [1.54569966E12, 36.0], [1.54569984E12, 44.0], [1.54569954E12, 34.0], [1.54569894E12, 41.0], [1.54569924E12, 34.0], [1.54569882E12, 30.0], [1.54569912E12, 33.0], [1.54569852E12, 29.0], [1.54569972E12, 34.0], [1.54569942E12, 34.0], [1.5456996E12, 35.0], [1.5456993E12, 35.0], [1.5456987E12, 30.0], [1.545699E12, 36.0], [1.54569858E12, 30.0], [1.54569888E12, 32.0], [1.5456999E12, 36.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.54569978E12, 552.0], [1.54569918E12, 333.0], [1.54569948E12, 122.0], [1.54569906E12, 76.0], [1.54569936E12, 65.0], [1.54569876E12, 57.0], [1.54569864E12, 63.0], [1.54569996E12, 64.0], [1.54569966E12, 80.0], [1.54569984E12, 486.9800000000032], [1.54569954E12, 61.0], [1.54569894E12, 79.0], [1.54569924E12, 72.0], [1.54569882E12, 55.0], [1.54569912E12, 77.0], [1.54569852E12, 53.0], [1.54569972E12, 61.0], [1.54569942E12, 68.0], [1.5456996E12, 69.0], [1.5456993E12, 68.0], [1.5456987E12, 73.0], [1.545699E12, 73.0], [1.54569858E12, 60.0], [1.54569888E12, 71.0], [1.5456999E12, 69.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.54569978E12, 338.9500000000007], [1.54569918E12, 127.0], [1.54569948E12, 57.0], [1.54569906E12, 42.0], [1.54569936E12, 43.0], [1.54569876E12, 38.0], [1.54569864E12, 41.0], [1.54569996E12, 42.0], [1.54569966E12, 47.0], [1.54569984E12, 103.0], [1.54569954E12, 43.0], [1.54569894E12, 54.0], [1.54569924E12, 44.0], [1.54569882E12, 38.0], [1.54569912E12, 42.0], [1.54569852E12, 37.0], [1.54569972E12, 43.0], [1.54569942E12, 43.0], [1.5456996E12, 46.0], [1.5456993E12, 44.0], [1.5456987E12, 40.0], [1.545699E12, 48.0], [1.54569858E12, 38.0], [1.54569888E12, 43.0], [1.5456999E12, 47.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54569996E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3.0, "minX": 1000.0, "maxY": 52.0, "series": [{"data": [[1000.0, 16.0], [2000.0, 14.0], [3000.0, 13.0], [4000.0, 13.0], [5000.0, 13.0], [6000.0, 13.0], [7000.0, 13.0], [8000.0, 13.0], [9000.0, 14.0], [10000.0, 14.0], [11000.0, 13.0], [12000.0, 14.0], [13000.0, 14.0], [14000.0, 14.0], [15000.0, 15.0], [16000.0, 15.0], [17000.0, 16.0], [18000.0, 17.0], [19000.0, 19.0], [20000.0, 20.0], [21000.0, 21.0], [22000.0, 20.0], [23000.0, 23.0], [24000.0, 23.0], [25000.0, 24.0], [26000.0, 24.0], [27000.0, 25.0], [28000.0, 30.0], [29000.0, 23.0], [30000.0, 24.0], [31000.0, 22.0], [32000.0, 25.0], [33000.0, 23.0], [34000.0, 22.0], [35000.0, 26.0], [36000.0, 21.0], [37000.0, 23.0], [38000.0, 22.5], [40000.0, 20.0], [39000.0, 23.0], [43000.0, 28.0], [41000.0, 20.0], [42000.0, 28.0], [44000.0, 27.0], [45000.0, 26.0], [46000.0, 23.0], [47000.0, 24.0], [48000.0, 22.0], [49000.0, 26.0], [51000.0, 26.0], [50000.0, 26.0], [52000.0, 24.0], [53000.0, 28.0], [54000.0, 29.0], [55000.0, 26.0], [57000.0, 30.0], [56000.0, 21.0], [59000.0, 24.0], [58000.0, 27.0], [61000.0, 24.0], [60000.0, 26.0], [63000.0, 24.0], [62000.0, 25.0], [64000.0, 23.0], [65000.0, 25.5], [68000.0, 25.0], [67000.0, 24.0], [66000.0, 25.0], [72000.0, 25.0], [70000.0, 24.0], [73000.0, 22.0], [71000.0, 27.0], [74000.0, 23.0], [77000.0, 23.0], [80000.0, 52.0], [81000.0, 24.0], [79000.0, 25.0], [86000.0, 22.0], [83000.0, 27.0], [85000.0, 28.0], [82000.0, 27.0], [89000.0, 24.0], [87000.0, 25.0], [90000.0, 26.0], [88000.0, 25.0], [94000.0, 26.5], [93000.0, 25.0], [91000.0, 29.0], [95000.0, 25.0], [96000.0, 28.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3000.0, 9.5], [2000.0, 3.0], [4000.0, 3.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 96000.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.create();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1000.0, "maxY": 49.5, "series": [{"data": [[1000.0, 0.0], [2000.0, 0.0], [3000.0, 0.0], [4000.0, 0.0], [5000.0, 0.0], [6000.0, 0.0], [7000.0, 5.0], [8000.0, 6.0], [9000.0, 8.0], [10000.0, 8.0], [11000.0, 9.0], [12000.0, 9.0], [13000.0, 10.0], [14000.0, 11.0], [15000.0, 11.0], [16000.0, 12.0], [17000.0, 13.0], [18000.0, 14.0], [19000.0, 15.0], [20000.0, 16.0], [21000.0, 17.0], [22000.0, 16.0], [23000.0, 18.0], [24000.0, 19.0], [25000.0, 20.0], [26000.0, 20.0], [27000.0, 20.0], [28000.0, 26.0], [29000.0, 21.0], [30000.0, 21.0], [31000.0, 20.0], [32000.0, 23.0], [33000.0, 21.0], [34000.0, 20.0], [35000.0, 22.0], [36000.0, 19.0], [37000.0, 21.0], [38000.0, 19.0], [40000.0, 16.0], [39000.0, 20.0], [43000.0, 24.0], [41000.0, 20.0], [42000.0, 21.0], [44000.0, 23.0], [45000.0, 21.0], [46000.0, 20.0], [47000.0, 21.0], [48000.0, 18.0], [49000.0, 20.0], [51000.0, 21.0], [50000.0, 17.5], [52000.0, 17.0], [53000.0, 25.0], [54000.0, 25.0], [55000.0, 18.0], [57000.0, 19.0], [56000.0, 19.0], [59000.0, 21.0], [58000.0, 19.5], [61000.0, 0.0], [60000.0, 20.0], [63000.0, 19.0], [62000.0, 0.0], [64000.0, 20.0], [65000.0, 20.0], [68000.0, 19.5], [67000.0, 21.0], [66000.0, 20.0], [72000.0, 19.0], [70000.0, 0.0], [73000.0, 18.0], [71000.0, 21.0], [74000.0, 18.0], [77000.0, 17.0], [80000.0, 49.5], [81000.0, 18.0], [79000.0, 22.0], [86000.0, 0.0], [83000.0, 20.0], [85000.0, 23.0], [82000.0, 20.0], [89000.0, 0.0], [87000.0, 20.0], [90000.0, 21.0], [88000.0, 22.5], [94000.0, 24.5], [93000.0, 21.0], [91000.0, 0.0], [95000.0, 20.0], [96000.0, 23.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[3000.0, 0.0], [2000.0, 0.0], [4000.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1, "maxX": 96000.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3859.3, "minX": 1.54569852E12, "maxY": 6236.35, "series": [{"data": [[1.54569978E12, 4566.683333333333], [1.54569918E12, 5013.083333333333], [1.54569948E12, 5315.583333333333], [1.54569906E12, 5440.5], [1.54569936E12, 5554.966666666666], [1.54569876E12, 6236.35], [1.54569864E12, 6133.166666666667], [1.54569996E12, 3859.3], [1.54569966E12, 5441.85], [1.54569984E12, 5210.966666666666], [1.54569954E12, 5469.483333333334], [1.54569894E12, 5884.616666666667], [1.54569924E12, 4968.0], [1.54569882E12, 6098.4], [1.54569912E12, 5329.766666666666], [1.54569852E12, 4132.883333333333], [1.54569972E12, 5593.8], [1.54569942E12, 5488.733333333334], [1.5456996E12, 5447.483333333334], [1.5456993E12, 5536.866666666667], [1.5456987E12, 6143.333333333333], [1.545699E12, 5510.2], [1.54569858E12, 6161.633333333333], [1.54569888E12, 6096.516666666666], [1.5456999E12, 4935.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54569996E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.54569852E12, "maxY": 3336.85, "series": [{"data": [[1.54569978E12, 2438.85], [1.54569918E12, 2681.45], [1.54569948E12, 2843.1833333333334], [1.54569906E12, 2911.116666666667], [1.54569936E12, 2970.55], [1.54569876E12, 3336.85], [1.54569864E12, 3279.733333333333], [1.54569996E12, 2061.8166666666666], [1.54569966E12, 2908.7833333333333], [1.54569984E12, 2785.1666666666665], [1.54569954E12, 2922.383333333333], [1.54569894E12, 3150.0666666666666], [1.54569924E12, 2655.2166666666667], [1.54569882E12, 3261.8166666666666], [1.54569912E12, 2851.9666666666667], [1.54569852E12, 2211.45], [1.54569972E12, 2990.2], [1.54569942E12, 2932.4666666666667], [1.5456996E12, 2913.6], [1.5456993E12, 2960.75], [1.5456987E12, 3285.9], [1.545699E12, 2948.35], [1.54569858E12, 3295.9666666666667], [1.54569888E12, 3261.983333333333], [1.5456999E12, 2638.45]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.54569996E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.impl.execchain.RequestAbortedException", "isController": false}, {"data": [[1.54569996E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.io.InterruptedIOException", "isController": false}, {"data": [[1.54569978E12, 2127.8166666666666], [1.54569918E12, 2331.6], [1.54569948E12, 2472.383333333333], [1.54569906E12, 2529.4166666666665], [1.54569936E12, 2584.4166666666665], [1.54569876E12, 2899.4666666666667], [1.54569864E12, 2853.45], [1.54569996E12, 1799.0833333333333], [1.54569966E12, 2533.0333333333333], [1.54569984E12, 2425.8], [1.54569954E12, 2547.133333333333], [1.54569894E12, 2734.516666666667], [1.54569924E12, 2312.8166666666666], [1.54569882E12, 2836.616666666667], [1.54569912E12, 2477.75], [1.54569852E12, 1919.7833333333333], [1.54569972E12, 2603.616666666667], [1.54569942E12, 2556.3], [1.5456996E12, 2533.866666666667], [1.5456993E12, 2576.0833333333335], [1.5456987E12, 2857.45], [1.545699E12, 2561.883333333333], [1.54569858E12, 2865.6666666666665], [1.54569888E12, 2834.5333333333333], [1.5456999E12, 2296.8]], "isOverall": false, "label": "204", "isController": false}, {"data": [[1.54569996E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.54569996E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.54569852E12, "maxY": 3118.1666666666665, "series": [{"data": [[1.54569996E12, 0.06666666666666667]], "isOverall": false, "label": "SkinPrice Creation-failure", "isController": false}, {"data": [[1.54569978E12, 2283.016666666667], [1.54569918E12, 2506.2166666666667], [1.54569948E12, 2657.8], [1.54569906E12, 2720.266666666667], [1.54569936E12, 2777.4], [1.54569876E12, 3118.15], [1.54569864E12, 3066.3333333333335], [1.54569996E12, 1930.6666666666667], [1.54569966E12, 2720.866666666667], [1.54569984E12, 2605.5666666666666], [1.54569954E12, 2734.55], [1.54569894E12, 2942.25], [1.54569924E12, 2484.366666666667], [1.54569882E12, 3049.233333333333], [1.54569912E12, 2664.9333333333334], [1.54569852E12, 2065.9333333333334], [1.54569972E12, 2797.0], [1.54569942E12, 2744.55], [1.5456996E12, 2723.766666666667], [1.5456993E12, 2768.266666666667], [1.5456987E12, 3071.7], [1.545699E12, 2755.116666666667], [1.54569858E12, 3080.9333333333334], [1.54569888E12, 3048.4666666666667], [1.5456999E12, 2467.85]], "isOverall": false, "label": "SkinPrice Creation-success", "isController": false}, {"data": [[1.54569978E12, 2283.65], [1.54569918E12, 2506.8333333333335], [1.54569948E12, 2657.766666666667], [1.54569906E12, 2720.266666666667], [1.54569936E12, 2777.5666666666666], [1.54569876E12, 3118.1666666666665], [1.54569864E12, 3066.85], [1.54569996E12, 1930.2333333333333], [1.54569966E12, 2720.95], [1.54569984E12, 2605.4], [1.54569954E12, 2734.9666666666667], [1.54569894E12, 2942.3333333333335], [1.54569924E12, 2483.6666666666665], [1.54569882E12, 3049.2], [1.54569912E12, 2664.7833333333333], [1.54569852E12, 2065.3], [1.54569972E12, 2796.8166666666666], [1.54569942E12, 2744.2166666666667], [1.5456996E12, 2723.7], [1.5456993E12, 2768.5666666666666], [1.5456987E12, 3071.65], [1.545699E12, 2755.116666666667], [1.54569858E12, 3080.7], [1.54569888E12, 3048.05], [1.5456999E12, 2467.4]], "isOverall": false, "label": "SkinPrice Find By ID-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54569996E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.54569852E12, "maxY": 6236.316666666667, "series": [{"data": [[1.54569978E12, 4566.666666666667], [1.54569918E12, 5013.05], [1.54569948E12, 5315.566666666667], [1.54569906E12, 5440.533333333334], [1.54569936E12, 5554.966666666666], [1.54569876E12, 6236.316666666667], [1.54569864E12, 6133.183333333333], [1.54569996E12, 3860.9], [1.54569966E12, 5441.816666666667], [1.54569984E12, 5210.966666666666], [1.54569954E12, 5469.516666666666], [1.54569894E12, 5884.583333333333], [1.54569924E12, 4968.033333333334], [1.54569882E12, 6098.433333333333], [1.54569912E12, 5329.716666666666], [1.54569852E12, 4131.233333333334], [1.54569972E12, 5593.816666666667], [1.54569942E12, 5488.766666666666], [1.5456996E12, 5447.466666666666], [1.5456993E12, 5536.833333333333], [1.5456987E12, 6143.35], [1.545699E12, 5510.233333333334], [1.54569858E12, 6161.633333333333], [1.54569888E12, 6096.516666666666], [1.5456999E12, 4935.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.54569996E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.54569996E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "responseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    choiceContainer.find("label").each(function(){
        this.style.color = color;
    });
}

